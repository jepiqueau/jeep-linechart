import { newE2EPage, E2EPage, E2EElement } from '@stencil/core/testing';

describe('jeep-linechart', () => {
  it('renders', async () => {
    const page = await newE2EPage();

    await page.setContent('<jeep-linechart></jeep-linechart>');
    const element = await page.find('jeep-linechart');
    expect(element).toHaveClass('hydrated');
  });

  describe('rendering', () => {
    let page: E2EPage;
    let element: E2EElement;
    let data: string;
    let data1: string;
    let dataPoints: string; 

    beforeEach(async () => {
      page = await newE2EPage();
      await page.setViewport({width:800,height:600});
      await page.setContent('<jeep-linechart></jeep-linechart>');
      element = await page.find('jeep-linechart');
      await page.addStyleTag({content: `
      :root {
        --chart-axis-color:#000000;   
        --chart-font-family:Verdana;  
        --chart-label-font-size:10px;
        --chart-title-color:#000000;
        --chart-title-font-size:25px;
        --chart-subtitle-color:#000000;
        --chart-subtitle-font-size:20px;
        --chart-axis-title-color:#000000;
        --chart-axis-title-font-size:15px;
        --chart-line-color:#4ba96e;
        --chart-label-color:#000000;
        --chart-animation-duration:1s;
        --chart-legend-font-size:12px;
        --chart-legend-top:true;
        --chart-border-color: #000000;
        --chart-border-width: 3;   

      }
      body {position:fixed;margin:0;padding:0;
        overflow:hidden;width:800px;height:600px}
      jeep-linechart {--height:450px;--width:720px;
        --top:50px;--left:40px;--background-color: #f4f9aa;}`
      });
      data1 = '{"color": "#425cef","name": "Line 1",';
      dataPoints = '"dataPoints":[{ "x": 14, "y": 450 },{ "x": 20, "y": 414 },';
      dataPoints += '{ "x": 30, "y": 520 },{ "x": 40, "y": 460 },{ "x": 50, "y": 450 },';
      dataPoints += '{ "x": 60, "y": 500 },{ "x": 70, "y": 480 },{ "x": 80, "y": 480 },';
      dataPoints += '{ "x": 90, "y": 410 },{ "x": 100, "y": 500 },{ "x": 110, "y": 480 },';
      dataPoints += '{ "x": 120, "y": 510 }]}';
      data = data1 + dataPoints; 
    });
    afterEach(() => {
      page = null;
      element = null;
    });
///*
    it('should not display div-linechart-container when no data given', async () => {
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      expect(divEl).toBeFalsy();
    });
    it('should not work without data', async () => {
      const errEl: E2EElement = await page.find('jeep-linechart >>> #div-error-message');
      expect(errEl).toBeDefined();
      expect(errEl.innerHTML).toEqual('<p id=\"p-error-message\">Error: no data property</p>');
    });
    it('should display "Error: no datapoints property" when no datapoints property', async () => {
      data='{"color": "#425cef","name": "Line 1"}';
      element.setProperty('data',data);
      await page.waitForChanges();
      const pEl: E2EElement = await page.find('jeep-linechart >>> #p-error-message');
      expect(pEl.textContent).toEqual("Error: no dataPoints object in dataset: 0 of data property");
    }); 
    it('should work with data', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const errEl: E2EElement = await page.find('jeep-linechart >>> #div-error-message');
      expect(errEl).toBeNull();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      expect(divEl).not.toBeNull();
    });
    it('should create the svg component', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      expect(divEl).not.toBeNull();
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      expect(svgEl).not.toBeNull();
      expect(svgEl.getAttribute('width')).toEqual('100%');
      expect(svgEl.getAttribute('height')).toEqual('100%');
    });
    it('should have created 11 group components as child of svg component', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEls: E2EElement[] = await svgEl.findAll('g');
      expect(gEls.length).toEqual(11);
      expect(gEls[0].getAttribute('id')).toEqual('marker-circle');
      expect(gEls[1].getAttribute('id')).toEqual('marker-square');
      expect(gEls[2].getAttribute('id')).toEqual('marker-triangle');
      expect(gEls[3].getAttribute('id')).toEqual('marker-cross');
      expect(gEls[4].getAttribute('id')).toEqual('marker-plus');
      expect(gEls[5].getAttribute('id')).toEqual('linechart-title');
      expect(gEls[6].getAttribute('id')).toEqual('linechart-axes');
      expect(gEls[7].getAttribute('id')).toEqual('linechart-legend');
      expect(gEls[8].getAttribute('id')).toEqual('linechart-ytitle');
      expect(gEls[9].getAttribute('id')).toEqual('linechart-xtitle');
      expect(gEls[10].getAttribute('id')).toEqual('linechart-data');

    });
    it('should create a defs component as child of svg component', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      expect(defsEl).not.toBeNull();
    });
    it('should have five group component in the defs component', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      expect(gEls.length).toEqual(5);
      expect(gEls[0].getAttribute('id')).toEqual('marker-circle');
      expect(gEls[1].getAttribute('id')).toEqual('marker-square');
      expect(gEls[2].getAttribute('id')).toEqual('marker-triangle');
      expect(gEls[3].getAttribute('id')).toEqual('marker-cross');
      expect(gEls[4].getAttribute('id')).toEqual('marker-plus');
    });
    it('should have a path component in gEls[0]', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[0].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M0,5 A5,5 0 1,1 10,5 A5,5 0 0,1 0,5 Z');
    });
    it('should have a path component in gEls[1]', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[1].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M0,0 L10,0 L10,10 L0,10 Z');
    });
    it('should have a path component in gEls[2]', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[2].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M5,0 L10,10 L0,10 Z');
    });
    it('should have a path component in gEls[3]', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[3].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M0,2 L2,0 L5,3 L8,0 L10,2 L7,5 L10,8 L8,10 L5,7 L2,10 L0,8 L3,5 Z');
    });
    it('should have a path component in gEls[4]', async () => {
      element.setProperty('data',data);
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const defsEl: E2EElement = await svgEl.find('defs');
      const gEls: E2EElement[] = await defsEl.findAll('g');
      const pathEl: E2EElement = await gEls[4].find('path');
      expect(pathEl.getAttribute('d')).toEqual('M0,4 L4,4 L4,0 L6,0 L6,4 L10,4 L10,6 L6,6 L6,10 L4,10 L4,6 L0,6 Z');
    });

    it('should create a svg text when ctitle property given', async () => {
      element.setProperty('ctitle','Basic Line Chart');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-title');
      const textEls: E2EElement[] = await gEl.findAll('text');
      expect(gEl).not.toBeNull();
      expect(gEl.getAttribute('id')).toEqual('linechart-title');
      expect(textEls.length).toEqual(1);
      expect(textEls[0].getAttribute('id')).toEqual('linechart-title-text');
      expect(textEls[0].textContent).toEqual('Basic Line Chart');
      expect(textEls[0].getAttribute('x')).toEqual('50%');
      expect(textEls[0].getAttribute('y')).toEqual('35');
      expect(textEls[0].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[0].getAttribute('font-size')).toEqual('25px');
      expect(textEls[0].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[0].getAttribute('fill')).toEqual('#000000');
    });
  
    it('should not create a subtitle when ctitle property not given', async () => {
      element.setProperty('subtitle','Sub-Title');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-title');
      const textEls: E2EElement[] = await gEl.findAll('text');
      expect(gEl).not.toBeNull();
      expect(gEl.getAttribute('id')).toEqual('linechart-title');
      expect(textEls.length).toEqual(0);
    });
    it('should create a subtitle when ctitle property given', async () => {
      element.setProperty('ctitle','Basic Line Chart');
      element.setProperty('subtitle','Sub-Title');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-title');
      const textEls: E2EElement[] = await gEl.findAll('text');
      expect(gEl).not.toBeNull();
      expect(gEl.getAttribute('id')).toEqual('linechart-title');
      expect(textEls.length).toEqual(2);
      expect(textEls[1].getAttribute('id')).toEqual('linechart-subtitle-text');
      expect(textEls[1].textContent).toEqual('Sub-Title');
      expect(textEls[1].getAttribute('x')).toEqual('50%');
      expect(textEls[1].getAttribute('y')).toEqual('57');
      expect(textEls[1].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[1].getAttribute('font-size')).toEqual('20px');
      expect(textEls[1].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[1].getAttribute('fill')).toEqual('#000000');
    });
  it('should have 5 line elements in the group element having id="linechart-axes"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gAxesEl: E2EElement = await svgEl.find('#linechart-axes');
      const lineEls: E2EElement[] = await gAxesEl.findAll('line');
      expect(lineEls.length).toEqual(5);
      expect(lineEls[0].getAttribute('id')).toEqual('linechart-yaxis');
      expect(lineEls[0].getAttribute('x1')).toEqual('36');
      expect(lineEls[0].getAttribute('y1')).toEqual('72');
      expect(lineEls[0].getAttribute('x2')).toEqual('36');
      expect(lineEls[0].getAttribute('y2')).toEqual('414');
      expect(lineEls[0].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[1].getAttribute('id')).toEqual('linechart-yLine600');
      expect(lineEls[1].getAttribute('x1')).toEqual('36');
      expect(lineEls[1].getAttribute('y1')).toEqual('72');
      expect(lineEls[1].getAttribute('x2')).toEqual('699');
      expect(lineEls[1].getAttribute('y2')).toEqual('72');
      expect(lineEls[1].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[1].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[2].getAttribute('id')).toEqual('linechart-yLine400');
      expect(lineEls[2].getAttribute('x1')).toEqual('36');
      expect(lineEls[2].getAttribute('y1')).toEqual('186');
      expect(lineEls[2].getAttribute('x2')).toEqual('699');
      expect(lineEls[2].getAttribute('y2')).toEqual('186');
      expect(lineEls[2].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[2].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[3].getAttribute('id')).toEqual('linechart-yLine200');
      expect(lineEls[3].getAttribute('x1')).toEqual('36');
      expect(lineEls[3].getAttribute('y1')).toEqual('300');
      expect(lineEls[3].getAttribute('x2')).toEqual('699');
      expect(lineEls[3].getAttribute('y2')).toEqual('300');
      expect(lineEls[3].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[3].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[4].getAttribute('id')).toEqual('linechart-xaxis');
      expect(lineEls[4].getAttribute('x1')).toEqual('36');
      expect(lineEls[4].getAttribute('y1')).toEqual('414');
      expect(lineEls[4].getAttribute('x2')).toEqual('699');
      expect(lineEls[4].getAttribute('y2')).toEqual('414');
      expect(lineEls[4].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[4].getAttribute('stroke-width')).toEqual('1');
    });
    it('should have 9 line elements when tick-y given in the group id="linechart-axes"', async () => {
      await page.addStyleTag({content: ':root{--chart-tick-y-length: 4px;}'});
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gAxesEl: E2EElement = await svgEl.find('#linechart-axes');
      const lineEls: E2EElement[] = await gAxesEl.findAll('line');
      expect(lineEls.length).toEqual(9);
      expect(lineEls[2].getAttribute('id')).toEqual('linechart-ytick600');
      expect(lineEls[2].getAttribute('x1')).toEqual('40');
      expect(lineEls[2].getAttribute('y1')).toEqual('72');
      expect(lineEls[2].getAttribute('x2')).toEqual('36');
      expect(lineEls[2].getAttribute('y2')).toEqual('72');
      expect(lineEls[2].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[2].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[4].getAttribute('id')).toEqual('linechart-ytick400');
      expect(lineEls[4].getAttribute('x1')).toEqual('40');
      expect(lineEls[4].getAttribute('y1')).toEqual('186');
      expect(lineEls[4].getAttribute('x2')).toEqual('36');
      expect(lineEls[4].getAttribute('y2')).toEqual('186');
      expect(lineEls[4].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[4].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[6].getAttribute('id')).toEqual('linechart-ytick200');
      expect(lineEls[6].getAttribute('x1')).toEqual('40');
      expect(lineEls[6].getAttribute('y1')).toEqual('300');
      expect(lineEls[6].getAttribute('x2')).toEqual('36');
      expect(lineEls[6].getAttribute('y2')).toEqual('300');
      expect(lineEls[6].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[6].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[8].getAttribute('id')).toEqual('linechart-ytick0');
      expect(lineEls[8].getAttribute('x1')).toEqual('40');
      expect(lineEls[8].getAttribute('y1')).toEqual('414');
      expect(lineEls[8].getAttribute('x2')).toEqual('36');
      expect(lineEls[8].getAttribute('y2')).toEqual('414');
      expect(lineEls[8].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[8].getAttribute('stroke-width')).toEqual('1');
    });

    it('should have 8 line elements in the group when grid-x having id="linechart-axes"', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;}'});
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gAxesEl: E2EElement = await svgEl.find('#linechart-axes');
      const lineEls: E2EElement[] = await gAxesEl.findAll('line');
      expect(lineEls.length).toEqual(8);
      expect(lineEls[0].getAttribute('id')).toEqual('linechart-yaxis');
      expect(lineEls[0].getAttribute('x1')).toEqual('36');
      expect(lineEls[0].getAttribute('y1')).toEqual('72');
      expect(lineEls[0].getAttribute('x2')).toEqual('36');
      expect(lineEls[0].getAttribute('y2')).toEqual('414');
      expect(lineEls[0].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[1].getAttribute('id')).toEqual('linechart-yLine600');
      expect(lineEls[1].getAttribute('x1')).toEqual('36');
      expect(lineEls[1].getAttribute('y1')).toEqual('72');
      expect(lineEls[1].getAttribute('x2')).toEqual('699');
      expect(lineEls[1].getAttribute('y2')).toEqual('72');
      expect(lineEls[1].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[1].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[2].getAttribute('id')).toEqual('linechart-yLine400');
      expect(lineEls[2].getAttribute('x1')).toEqual('36');
      expect(lineEls[2].getAttribute('y1')).toEqual('186');
      expect(lineEls[2].getAttribute('x2')).toEqual('699');
      expect(lineEls[2].getAttribute('y2')).toEqual('186');
      expect(lineEls[2].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[2].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[3].getAttribute('id')).toEqual('linechart-yLine200');
      expect(lineEls[3].getAttribute('x1')).toEqual('36');
      expect(lineEls[3].getAttribute('y1')).toEqual('300');
      expect(lineEls[3].getAttribute('x2')).toEqual('699');
      expect(lineEls[3].getAttribute('y2')).toEqual('300');
      expect(lineEls[3].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[3].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[4].getAttribute('id')).toEqual('linechart-xaxis');
      expect(lineEls[4].getAttribute('x1')).toEqual('36');
      expect(lineEls[4].getAttribute('y1')).toEqual('414');
      expect(lineEls[4].getAttribute('x2')).toEqual('699');
      expect(lineEls[4].getAttribute('y2')).toEqual('414');
      expect(lineEls[4].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[4].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[5].getAttribute('id')).toEqual('linechart-xLine50');
      expect(lineEls[5].getAttribute('x1')).toEqual('257');
      expect(lineEls[5].getAttribute('y1')).toEqual('414');
      expect(lineEls[5].getAttribute('x2')).toEqual('257');
      expect(lineEls[5].getAttribute('y2')).toEqual('72');
      expect(lineEls[5].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[5].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[6].getAttribute('id')).toEqual('linechart-xLine100');
      expect(lineEls[6].getAttribute('x1')).toEqual('478');
      expect(lineEls[6].getAttribute('y1')).toEqual('414');
      expect(lineEls[6].getAttribute('x2')).toEqual('478');
      expect(lineEls[6].getAttribute('y2')).toEqual('72');
      expect(lineEls[6].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[6].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[7].getAttribute('id')).toEqual('linechart-xLine150');
      expect(lineEls[7].getAttribute('x1')).toEqual('699');
      expect(lineEls[7].getAttribute('y1')).toEqual('414');
      expect(lineEls[7].getAttribute('x2')).toEqual('699');
      expect(lineEls[7].getAttribute('y2')).toEqual('72');
      expect(lineEls[7].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[7].getAttribute('stroke-width')).toEqual('1');
    });

    it('should have 16 line elements when tick-x & tick-y given in the group id="linechart-axes"', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gAxesEl: E2EElement = await svgEl.find('#linechart-axes');
      const lineEls: E2EElement[] = await gAxesEl.findAll('line');
      expect(lineEls.length).toEqual(16);
      expect(lineEls[9].getAttribute('id')).toEqual('linechart-xtick0');
      expect(lineEls[9].getAttribute('x1')).toEqual('40');
      expect(lineEls[9].getAttribute('y1')).toEqual('409');
      expect(lineEls[9].getAttribute('x2')).toEqual('40');
      expect(lineEls[9].getAttribute('y2')).toEqual('414');
      expect(lineEls[9].getAttribute('stroke')).toEqual('#000000');
      expect(lineEls[9].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[11].getAttribute('id')).toEqual('linechart-xtick50');
      expect(lineEls[11].getAttribute('x1')).toEqual('259.66666666666663');
      expect(lineEls[11].getAttribute('y1')).toEqual('409');
      expect(lineEls[11].getAttribute('x2')).toEqual('259.66666666666663');
      expect(lineEls[11].getAttribute('y2')).toEqual('414');
      expect(lineEls[11].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[11].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[13].getAttribute('id')).toEqual('linechart-xtick100');
      expect(lineEls[13].getAttribute('x1')).toEqual('479.3333333333333');
      expect(lineEls[13].getAttribute('y1')).toEqual('409');
      expect(lineEls[13].getAttribute('x2')).toEqual('479.3333333333333');
      expect(lineEls[13].getAttribute('y2')).toEqual('414');
      expect(lineEls[13].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[13].getAttribute('stroke-width')).toEqual('1');
      expect(lineEls[15].getAttribute('id')).toEqual('linechart-xtick150');
      expect(lineEls[15].getAttribute('x1')).toEqual('699');
      expect(lineEls[15].getAttribute('y1')).toEqual('409');
      expect(lineEls[15].getAttribute('x2')).toEqual('699');
      expect(lineEls[15].getAttribute('y2')).toEqual('414');
      expect(lineEls[15].getAttribute('stroke')).toEqual('#4ba96e');
      expect(lineEls[15].getAttribute('stroke-width')).toEqual('1');
    });
    it('should have 8 text elements in the group element having id="linechart-axes"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gAxesEl: E2EElement = await svgEl.find('#linechart-axes');
      const textEls: E2EElement[] = await gAxesEl.findAll('text');
      expect(textEls.length).toEqual(8);
      expect(textEls[0].getAttribute('id')).toEqual('linechart-ylabel600');
      expect(textEls[0].textContent).toEqual('600');
      expect(textEls[0].getAttribute('x')).toEqual('34');
      expect(textEls[0].getAttribute('y')).toEqual('75');
      expect(textEls[0].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[0].getAttribute('font-size')).toEqual('10px');
      expect(textEls[0].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[0].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[1].getAttribute('id')).toEqual('linechart-ylabel400');
      expect(textEls[1].textContent).toEqual('400');
      expect(textEls[1].getAttribute('x')).toEqual('34');
      expect(textEls[1].getAttribute('y')).toEqual('189');
      expect(textEls[1].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[1].getAttribute('font-size')).toEqual('10px');
      expect(textEls[1].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[1].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[1].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[2].getAttribute('id')).toEqual('linechart-ylabel200');
      expect(textEls[2].textContent).toEqual('200');
      expect(textEls[2].getAttribute('x')).toEqual('34');
      expect(textEls[2].getAttribute('y')).toEqual('303');
      expect(textEls[2].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[2].getAttribute('font-size')).toEqual('10px');
      expect(textEls[2].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[2].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[2].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[3].getAttribute('id')).toEqual('linechart-ylabel0');
      expect(textEls[3].textContent).toEqual('0');
      expect(textEls[3].getAttribute('x')).toEqual('34');
      expect(textEls[3].getAttribute('y')).toEqual('417');
      expect(textEls[3].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[3].getAttribute('font-size')).toEqual('10px');
      expect(textEls[3].getAttribute('text-anchor')).toEqual('end');
      expect(textEls[3].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[3].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[4].getAttribute('id')).toEqual('linechart-xlabel0');
      expect(textEls[4].textContent).toEqual('0');
      expect(textEls[4].getAttribute('x')).toEqual('36');
      expect(textEls[4].getAttribute('y')).toEqual('424');
      expect(textEls[4].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[4].getAttribute('font-size')).toEqual('10px');
      expect(textEls[4].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[4].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[4].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[4].getAttribute('transform')).toEqual('rotate(0,36,424)');
      expect(textEls[5].getAttribute('id')).toEqual('linechart-xlabel50');
      expect(textEls[5].textContent).toEqual('50');
      expect(textEls[5].getAttribute('x')).toEqual('257');
      expect(textEls[5].getAttribute('y')).toEqual('424');
      expect(textEls[5].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[5].getAttribute('font-size')).toEqual('10px');
      expect(textEls[5].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[5].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[5].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[5].getAttribute('transform')).toEqual('rotate(0,257,424)');
      expect(textEls[6].getAttribute('id')).toEqual('linechart-xlabel100');
      expect(textEls[6].textContent).toEqual('100');
      expect(textEls[6].getAttribute('x')).toEqual('478');
      expect(textEls[6].getAttribute('y')).toEqual('424');
      expect(textEls[6].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[6].getAttribute('font-size')).toEqual('10px');
      expect(textEls[6].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[6].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[6].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[6].getAttribute('transform')).toEqual('rotate(0,478,424)');
      expect(textEls[7].getAttribute('id')).toEqual('linechart-xlabel150');
      expect(textEls[7].textContent).toEqual('150');
      expect(textEls[7].getAttribute('x')).toEqual('699');
      expect(textEls[7].getAttribute('y')).toEqual('424');
      expect(textEls[7].getAttribute('font-family')).toEqual('Verdana');
      expect(textEls[7].getAttribute('font-size')).toEqual('10px');
      expect(textEls[7].getAttribute('text-anchor')).toEqual('middle');
      expect(textEls[7].getAttribute('stroke')).toEqual('#000000');
      expect(textEls[7].getAttribute('stroke-width')).toEqual('1');
      expect(textEls[7].getAttribute('transform')).toEqual('rotate(0,699,424)');
    });
    it('should have a g component with id="linechart-ytitle" as child of svg component', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-ytitle');
      expect(gEl).not.toBeNull();
      expect(gEl.getAttribute('id')).toEqual('linechart-ytitle');
      expect(gEl.getAttribute('transform')).toEqual('translate(0,-12)');
    });

    it('should have a text component in the group with id="linechart-ytitle"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-ytitle');
      const textEl: E2EElement = await gEl.find('#linechart-ytitle-text');
      expect(textEl).not.toBeNull();
      expect(textEl.getAttribute('id')).toEqual('linechart-ytitle-text');
      expect(textEl.textContent).toEqual('test for y axis');
      expect(textEl.getAttribute('transform')).toEqual('rotate(-90 25 256)');
      expect(textEl.getAttribute('x')).toEqual('25');
      expect(textEl.getAttribute('y')).toEqual('256');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('15px');
      expect(textEl.getAttribute('text-anchor')).toEqual('middle');
      expect(textEl.getAttribute('fill')).toEqual('#000000');
    });

    it('should have a g component with id="linechart-xtitle" as child of svg component', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-xtitle');
      expect(gEl).not.toBeNull();
      expect(gEl.getAttribute('id')).toEqual('linechart-xtitle');
      expect(gEl.getAttribute('transform')).toEqual('translate(12,0)');
    });
    it('should have a text component in the group with id="linechart-xtitle"', async () => {
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const gEl: E2EElement = await svgEl.find('#linechart-xtitle');
      const textEl: E2EElement = await gEl.find('#linechart-xtitle-text');
      expect(textEl).not.toBeNull();
      expect(textEl.getAttribute('id')).toEqual('linechart-xtitle-text');
      expect(textEl.textContent).toEqual('test for x axis');
      expect(textEl.getAttribute('x')).toEqual('353');
      expect(textEl.getAttribute('y')).toEqual('425');
      expect(textEl.getAttribute('font-family')).toEqual('Verdana');
      expect(textEl.getAttribute('font-size')).toEqual('15px');
      expect(textEl.getAttribute('text-anchor')).toEqual('middle');
      expect(textEl.getAttribute('fill')).toEqual('#000000');
    });
    it('should have a chart with one dataset and one polyline', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const dataEl: E2EElement = await svgEl.find('#linechart-data');
      const dataSetEl: E2EElement = await dataEl.find('#linechart-dataset-line-1');
      const polylineEls: E2EElement[] = await dataSetEl.findAll('polyline');
      let resPoints:string = "117.82666666666667,151.75 143.46666666666667,170.89 ";
      resPoints = resPoints + "186.2,114.53333333333333 228.93333333333334,146.43333333333334 271.66666666666663,151.75 314.4,125.16666666666666 "; 
      resPoints = resPoints + "357.1333333333333,135.8 399.8666666666667,135.8 442.6,173.01666666666665 485.3333333333333,125.16666666666666 ";
      resPoints = resPoints + "528.0666666666666,135.8 570.8,119.85";
      expect(dataEl).not.toBeNull();      
      expect(dataSetEl).not.toBeNull();
      expect(polylineEls.length).toEqual(1);
      expect(polylineEls[0].getAttribute('id')).toEqual('linechart-data-0'); 
      expect(polylineEls[0].getAttribute('points')).toEqual(resPoints);
      expect(polylineEls[0].getAttribute('fill')).toEqual('none');
      expect(polylineEls[0].getAttribute('stroke')).toEqual('#425cef');
      expect(polylineEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(polylineEls[0].getAttribute('stroke-linecap')).toEqual('round');
      expect(polylineEls[0].getAttribute('stroke-linejoin')).toEqual('round');
      expect(polylineEls[0].getAttribute('stroke-miterlimit')).toEqual('10');
      
    });
    it('should have a chart with one dataset && one polyline when type = line', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data1 += `"type":"line",`;
      data = data1 + dataPoints; 
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const dataEl: E2EElement = await svgEl.find('#linechart-data');
      const dataSetEl: E2EElement = await dataEl.find('#linechart-dataset-line-1');
      const polylineEls: E2EElement[] = await dataSetEl.findAll('polyline');
      let resPoints:string = "117.82666666666667,151.75 143.46666666666667,170.89 ";
      resPoints = resPoints + "186.2,114.53333333333333 228.93333333333334,146.43333333333334 271.66666666666663,151.75 314.4,125.16666666666666 "; 
      resPoints = resPoints + "357.1333333333333,135.8 399.8666666666667,135.8 442.6,173.01666666666665 485.3333333333333,125.16666666666666 ";
      resPoints = resPoints + "528.0666666666666,135.8 570.8,119.85";
      expect(dataEl).not.toBeNull();      
      expect(dataSetEl).not.toBeNull();
      expect(polylineEls.length).toEqual(1);
      expect(polylineEls[0].getAttribute('id')).toEqual('linechart-data-0'); 
      expect(polylineEls[0].getAttribute('points')).toEqual(resPoints);
      expect(polylineEls[0].getAttribute('fill')).toEqual('none');
      expect(polylineEls[0].getAttribute('stroke')).toEqual('#425cef');
      expect(polylineEls[0].getAttribute('stroke-width')).toEqual('1');
      expect(polylineEls[0].getAttribute('stroke-linecap')).toEqual('round');
      expect(polylineEls[0].getAttribute('stroke-linejoin')).toEqual('round');
      expect(polylineEls[0].getAttribute('stroke-miterlimit')).toEqual('10');
      
    });
    it('should have a chart with one dataset && markers when type = scatter', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data1 += `"type":"scatter",`;
      dataPoints = '"dataPoints":[{ "x": 14, "y": 450 },{ "x": 20, "y": 414 },';
      dataPoints += '{ "x": 30, "y": 520 },{ "x": 40, "y": 460 },{ "x": 50, "y": 450 }]}';
      data = data1 + dataPoints; 
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const dataEl: E2EElement = await svgEl.find('#linechart-data');
      const dataSetEl: E2EElement = await dataEl.find('#linechart-dataset-line-1');
      const polylineEls: E2EElement[] = await dataSetEl.findAll('polyline');
      const markerEls: E2EElement[] = await dataSetEl.findAll('g');
      const useEls: E2EElement[] = await dataSetEl.findAll('use');
      expect(dataEl).not.toBeNull();      
      expect(dataSetEl).not.toBeNull();
      expect(polylineEls.length).toEqual(0);
      expect(markerEls.length).toEqual(5);
      expect(useEls.length).toEqual(5);
      expect(markerEls[0].getAttribute('id')).toEqual('marker-plus-g-0-0');
      expect(markerEls[0].getAttribute('fill')).toEqual('#425cef');
      expect(markerEls[1].getAttribute('id')).toEqual('marker-plus-g-0-1');
      expect(markerEls[1].getAttribute('fill')).toEqual('#425cef');
      expect(markerEls[2].getAttribute('id')).toEqual('marker-plus-g-0-2');
      expect(markerEls[2].getAttribute('fill')).toEqual('#425cef');
      expect(markerEls[3].getAttribute('id')).toEqual('marker-plus-g-0-3');
      expect(markerEls[3].getAttribute('fill')).toEqual('#425cef');
      expect(markerEls[4].getAttribute('id')).toEqual('marker-plus-g-0-4');
      expect(markerEls[4].getAttribute('fill')).toEqual('#425cef');
      expect(useEls[0].getAttribute('id')).toEqual('marker-plus-0-0');
      expect(useEls[0].getAttribute('xlink:href')).toEqual('#marker-plus');
      expect(useEls[0].getAttribute('width')).toEqual('10');
      expect(useEls[0].getAttribute('height')).toEqual('10');
      expect(useEls[0].getAttribute('transform')).toEqual('translate(0,0) scale(1)');
      expect(useEls[0].getAttribute('x')).toEqual('202.56666666666666');
      expect(useEls[0].getAttribute('y')).toEqual('146.75');
      expect(useEls[1].getAttribute('id')).toEqual('marker-plus-0-1');
      expect(useEls[1].getAttribute('x')).toEqual('266.66666666666663');
      expect(useEls[1].getAttribute('y')).toEqual('165.89');
      expect(useEls[2].getAttribute('id')).toEqual('marker-plus-0-2');
      expect(useEls[2].getAttribute('x')).toEqual('373.5');
      expect(useEls[2].getAttribute('y')).toEqual('109.53333333333333');
      expect(useEls[3].getAttribute('id')).toEqual('marker-plus-0-3');
      expect(useEls[3].getAttribute('x')).toEqual('480.3333333333333');
      expect(useEls[3].getAttribute('y')).toEqual('141.43333333333334');
      expect(useEls[4].getAttribute('id')).toEqual('marker-plus-0-4');
      expect(useEls[4].getAttribute('x')).toEqual('587.1666666666666');
      expect(useEls[4].getAttribute('y')).toEqual('146.75');
    });

    it('should have a chart with one dataset && a polyline && markers when type = line', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data1 += `"type":"line","markerType": "circle","markerSize": 15,"markerColor": "#ff0000",`;
      dataPoints = '"dataPoints":[{ "x": 14, "y": 450 },{ "x": 20, "y": 414 },';
      dataPoints += '{ "x": 30, "y": 520 },{ "x": 40, "y": 460 },{ "x": 50, "y": 450 }]}';
      data = data1 + dataPoints; 
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const dataEl: E2EElement = await svgEl.find('#linechart-data');
      const dataSetEl: E2EElement = await dataEl.find('#linechart-dataset-line-1');
      const polylineEls: E2EElement[] = await dataSetEl.findAll('polyline');
      const markerEls: E2EElement[] = await dataSetEl.findAll('g');
      const useEls: E2EElement[] = await dataSetEl.findAll('use');
      let resPoints:string = "207.56666666666666,151.75 271.66666666666663,170.89 ";
      resPoints = resPoints + "378.5,114.53333333333333 485.3333333333333,146.43333333333334 "; 
      resPoints = resPoints + "592.1666666666666,151.75";

      expect(dataEl).not.toBeNull();      
      expect(dataSetEl).not.toBeNull();
      expect(polylineEls.length).toEqual(1);
      expect(polylineEls[0].getAttribute('id')).toEqual('linechart-data-0'); 
      expect(polylineEls[0].getAttribute('points')).toEqual(resPoints);
      expect(markerEls.length).toEqual(5);
      expect(useEls.length).toEqual(5);
      expect(markerEls[0].getAttribute('id')).toEqual('marker-circle-g-0-0');
      expect(markerEls[0].getAttribute('fill')).toEqual('#ff0000');
      expect(markerEls[1].getAttribute('id')).toEqual('marker-circle-g-0-1');
      expect(markerEls[1].getAttribute('fill')).toEqual('#ff0000');
      expect(markerEls[2].getAttribute('id')).toEqual('marker-circle-g-0-2');
      expect(markerEls[2].getAttribute('fill')).toEqual('#ff0000');
      expect(markerEls[3].getAttribute('id')).toEqual('marker-circle-g-0-3');
      expect(markerEls[3].getAttribute('fill')).toEqual('#ff0000');
      expect(markerEls[4].getAttribute('id')).toEqual('marker-circle-g-0-4');
      expect(markerEls[4].getAttribute('fill')).toEqual('#ff0000');
      expect(useEls[0].getAttribute('id')).toEqual('marker-circle-0-0');
      expect(useEls[0].getAttribute('xlink:href')).toEqual('#marker-circle');
      expect(useEls[0].getAttribute('width')).toEqual('10');
      expect(useEls[0].getAttribute('height')).toEqual('10');
      expect(useEls[0].getAttribute('transform')).toEqual('translate(-103.78333333333333,-75.875) scale(1.5)');
      expect(useEls[0].getAttribute('x')).toEqual('202.56666666666666');
      expect(useEls[0].getAttribute('y')).toEqual('146.75');
      expect(useEls[1].getAttribute('id')).toEqual('marker-circle-0-1');
      expect(useEls[1].getAttribute('transform')).toEqual('translate(-135.83333333333331,-85.445) scale(1.5)');
      expect(useEls[1].getAttribute('x')).toEqual('266.66666666666663');
      expect(useEls[1].getAttribute('y')).toEqual('165.89');
      expect(useEls[2].getAttribute('id')).toEqual('marker-circle-0-2');
      expect(useEls[2].getAttribute('transform')).toEqual('translate(-189.25,-57.266666666666666) scale(1.5)');
      expect(useEls[2].getAttribute('x')).toEqual('373.5');
      expect(useEls[2].getAttribute('y')).toEqual('109.53333333333333');
      expect(useEls[3].getAttribute('id')).toEqual('marker-circle-0-3');
      expect(useEls[3].getAttribute('transform')).toEqual('translate(-242.66666666666666,-73.21666666666667) scale(1.5)');
      expect(useEls[3].getAttribute('x')).toEqual('480.3333333333333');
      expect(useEls[3].getAttribute('y')).toEqual('141.43333333333334');
      expect(useEls[4].getAttribute('id')).toEqual('marker-circle-0-4');
      expect(useEls[4].getAttribute('transform')).toEqual('translate(-296.0833333333333,-75.875) scale(1.5)');
      expect(useEls[4].getAttribute('x')).toEqual('587.1666666666666');
      expect(useEls[4].getAttribute('y')).toEqual('146.75');
    });
  it('should have a chart with one dataset && a polyline with stroke-width=2 when lineThickness = 2', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data1 += `"type":"line","lineThickness":"2","markerType": "circle","markerSize": 15,"markerColor": "#ff0000",`;
      dataPoints = '"dataPoints":[{ "x": 14, "y": 450 },{ "x": 20, "y": 414 },';
      dataPoints += '{ "x": 30, "y": 520 },{ "x": 40, "y": 460 },{ "x": 50, "y": 450 }]}';
      data = data1 + dataPoints; 
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const dataEl: E2EElement = await svgEl.find('#linechart-data');
      const dataSetEl: E2EElement = await dataEl.find('#linechart-dataset-line-1');
      const polylineEls: E2EElement[] = await dataSetEl.findAll('polyline');
      const markerEls: E2EElement[] = await dataSetEl.findAll('g');
      const useEls: E2EElement[] = await dataSetEl.findAll('use');
      let resPoints:string = "207.56666666666666,151.75 271.66666666666663,170.89 ";
      resPoints = resPoints + "378.5,114.53333333333333 485.3333333333333,146.43333333333334 "; 
      resPoints = resPoints + "592.1666666666666,151.75";

      expect(dataEl).not.toBeNull();      
      expect(dataSetEl).not.toBeNull();
      expect(polylineEls.length).toEqual(1);
      expect(polylineEls[0].getAttribute('id')).toEqual('linechart-data-0'); 
      expect(polylineEls[0].getAttribute('points')).toEqual(resPoints);
      expect(polylineEls[0].getAttribute('stroke-width')).toEqual('2');
      expect(markerEls.length).toEqual(5);
      expect(useEls.length).toEqual(5);
    });
    it('should have a chart with a polyline with one animate child when animate property set', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data1 += `"type":"line","lineThickness":"2","markerType": "circle","markerSize": 15,"markerColor": "#ff0000",`;
      dataPoints = '"dataPoints":[{ "x": 14, "y": 450 },{ "x": 20, "y": 414 },';
      dataPoints += '{ "x": 30, "y": 520 },{ "x": 40, "y": 460 },{ "x": 50, "y": 450 }]}';
      data = data1 + dataPoints; 
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      element.setProperty('animation',true);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const dataEl: E2EElement = await svgEl.find('#linechart-data');
      const dataSetEl: E2EElement = await dataEl.find('#linechart-dataset-line-1');
      const polylineEls: E2EElement[] = await dataSetEl.findAll('polyline');
      let resPoints:string = "207.56666666666666,151.75 271.66666666666663,170.89 ";
      resPoints = resPoints + "378.5,114.53333333333333 485.3333333333333,146.43333333333334 "; 
      resPoints = resPoints + "592.1666666666666,151.75";

      expect(dataEl).not.toBeNull();      
      expect(dataSetEl).not.toBeNull();
      expect(polylineEls.length).toEqual(1);
      const animateEls: E2EElement[] = await polylineEls[0].findAll('animate');
      expect(polylineEls[0].getAttribute('id')).toEqual('linechart-data-0'); 
      expect(polylineEls[0].getAttribute('points')).toEqual(resPoints);
      expect(polylineEls[0].getAttribute('stroke-width')).toEqual('2');
      expect(polylineEls[0].getAttribute('stroke-dasharray')).toEqual('406.14310349107916 406.14310349107916');
      expect(polylineEls[0].getAttribute('stroke-dashoffset')).toEqual('406.14310349107916');
      expect(animateEls.length).toEqual(1);
      expect(animateEls[0].getAttribute('attributeName')).toEqual('stroke-dashoffset'); 
      expect(animateEls[0].getAttribute('dur')).toEqual('1s'); 
      expect(animateEls[0].getAttribute('fill')).toEqual('freeze'); 
      expect(animateEls[0].getAttribute('from')).toEqual('406.14310349107916'); 
      expect(animateEls[0].getAttribute('to')).toEqual('0'); 
    });

    it('should have a chart with one dataset && no border', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data1 += `"type":"line","lineThickness":"2","markerType": "circle","markerSize": 15,"markerColor": "#ff0000",`;
      dataPoints = '"dataPoints":[{ "x": 14, "y": 450 },{ "x": 20, "y": 414 },';
      dataPoints += '{ "x": 30, "y": 520 },{ "x": 40, "y": 460 },{ "x": 50, "y": 450 }]}';
      data = data1 + dataPoints; 
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const rectEl: E2EElement = await svgEl.find('#svg-border-rect');
      expect(rectEl).not.toBeNull();
      expect(rectEl.getAttribute('class')).toEqual('border-rect notvisible');      
    });
    it('should have a chart with one dataset && with border when cborder property given', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data1 += `"type":"line","lineThickness":"2","markerType": "circle","markerSize": 15,"markerColor": "#ff0000",`;
      dataPoints = '"dataPoints":[{ "x": 14, "y": 450 },{ "x": 20, "y": 414 },';
      dataPoints += '{ "x": 30, "y": 520 },{ "x": 40, "y": 460 },{ "x": 50, "y": 450 }]}';
      data = data1 + dataPoints; 
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      element.setProperty('cborder',true);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const rectEl: E2EElement = await svgEl.find('#svg-border-rect');
      expect(rectEl).not.toBeNull();
      expect(rectEl.getAttribute('class')).toEqual('border-rect');      
    });

    it('should have a chart with one dataset && a circle when dataPoints have one Point', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data1 += `"type":"line",`;
      dataPoints = '"dataPoints":[{ "x": 30, "y": 520 }]}';
      data = data1 + dataPoints; 
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const dataEl: E2EElement = await svgEl.find('#linechart-data');
      const dataSetEl: E2EElement = await dataEl.find('#linechart-dataset-line-1');
      const polylineEls: E2EElement[] = await dataSetEl.findAll('polyline');
      const circleEls: E2EElement[] = await dataSetEl.findAll('circle');
      expect(dataEl).not.toBeNull();      
      expect(dataSetEl).not.toBeNull();
      expect(polylineEls.length).toEqual(0);
      expect(circleEls.length).toEqual(1);
      expect(circleEls[0].getAttribute('id')).toEqual('linechart-data-0'); 
      expect(circleEls[0].getAttribute('cx')).toEqual("538.75");
      expect(circleEls[0].getAttribute('cy')).toEqual("114.53333333333333");
      expect(circleEls[0].getAttribute('r')).toEqual("10");
      expect(circleEls[0].getAttribute('fill')).toEqual("#425cef");
      expect(circleEls[0].getAttribute('fill-opacity')).toEqual("0.75");
      expect(circleEls[0].getAttribute('stroke')).toEqual("#425cef");
      expect(circleEls[0].getAttribute('stroke-width')).toEqual("2");
    });

    it('should have a chart with one dataset && no legend', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data1 += `"type":"line","lineThickness":"2","markerType": "circle","markerSize": 15,"markerColor": "#ff0000",`;
      dataPoints = '"dataPoints":[{ "x": 14, "y": 450 },{ "x": 20, "y": 414 },';
      dataPoints += '{ "x": 30, "y": 520 },{ "x": 40, "y": 460 },{ "x": 50, "y": 450 }]}';
      data = data1 + dataPoints; 
      element.setProperty('ctitle','Basic Line Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','test for y axis');
      element.setProperty('xtitle','test for x axis');
      element.setProperty('data',data);
      element.setProperty('cborder',true);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const legendEl: E2EElement = await svgEl.find('#linechart-legend');
      expect(legendEl).not.toBeNull();
      expect(legendEl.getAttribute('class')).toEqual('hidden');
    });
    it('should have a chart with two datasets && legend on Top', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x: true;--chart-tick-y-length: 4px;--chart-tick-x-length: 5px}'});
      data='[{"color":"#425cef","name":"Line 1","type":"line","lineThickness": 2,';
      data+='"markerType":"circle","markerSize":10,"markerColor":"#1f41ff",';
      data+='"dataPoints":[{"x":14,"y":350},{"x":20,"y":414},{"x":30,"y":520},{"x":40,"y":460}]},';
      data+='{"color": "#ff2051","name":"Line 2","type":"line","lineThickness":2,';
      data+='"markerType":"cross","markerSize":10,"markerColor":"#ff0015",';
      data+='"dataPoints":[{"x":14,"y":250},{"x":20,"y":514},{"x":30,"y":270},{"x":40,"y":320}]}]';
      element.setProperty('ctitle','Multiple Lines Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','weight (kg)');
      element.setProperty('xtitle','distance (m)');
      element.setProperty('data',data);
      element.setProperty('cborder',true);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const legendEl: E2EElement = await svgEl.find('#linechart-legend');
      const xTitleEl: E2EElement = await svgEl.find('#linechart-xtitle');
      const yTitleEl: E2EElement = await svgEl.find('#linechart-ytitle');
      const xTextEl: E2EElement = await xTitleEl.find('#linechart-xtitle-text');
      const yTextEl: E2EElement = await yTitleEl.find('#linechart-ytitle-text');
      expect(legendEl).not.toBeNull();
      expect(legendEl.getAttribute('class')).toEqual('');
      const lineEls: E2EElement[] = await legendEl.findAll('line');
      const textEls: E2EElement[] = await legendEl.findAll('text');
      expect(lineEls.length).toEqual(2);
      expect(textEls.length).toEqual(2);
      expect(lineEls[0].getAttribute('x1')).toEqual("283.4375");
      expect(lineEls[0].getAttribute('y1')).toEqual("82");
      expect(lineEls[0].getAttribute('x2')).toEqual("298.4375");
      expect(lineEls[0].getAttribute('y2')).toEqual("82");
      expect(lineEls[0].getAttribute('stroke')).toEqual("#425cef");
      expect(lineEls[0].getAttribute('stroke-width')).toEqual("2");
      expect(textEls[0].getAttribute('x')).toEqual("303.4375");
      expect(textEls[0].getAttribute('y')).toEqual("82");
      expect(textEls[0].getAttribute('text-anchor')).toEqual("start");
      expect(textEls[0].getAttribute('font-family')).toEqual("Verdana");
      expect(textEls[0].getAttribute('font-size')).toEqual("12px");
      expect(textEls[0].textContent).toEqual("Line 1");
      expect(lineEls[1].getAttribute('x1')).toEqual("360");
      expect(lineEls[1].getAttribute('y1')).toEqual("82");
      expect(lineEls[1].getAttribute('x2')).toEqual("375");
      expect(lineEls[1].getAttribute('y2')).toEqual("82");
      expect(lineEls[1].getAttribute('stroke')).toEqual("#ff2051");
      expect(lineEls[1].getAttribute('stroke-width')).toEqual("2");
      expect(textEls[1].getAttribute('x')).toEqual("380");
      expect(textEls[1].getAttribute('y')).toEqual("82");
      expect(textEls[1].getAttribute('text-anchor')).toEqual("start");
      expect(textEls[1].getAttribute('font-family')).toEqual("Verdana");
      expect(textEls[1].getAttribute('font-size')).toEqual("12px");
      expect(textEls[1].textContent).toEqual("Line 2");
      expect(xTextEl.getAttribute('x')).toEqual('353');
      expect(xTextEl.getAttribute('y')).toEqual('425');
      expect(yTextEl.getAttribute('x')).toEqual('25');
      expect(yTextEl.getAttribute('y')).toEqual('259');

    });
    it('should have a chart with two datasets && legend on Bottom', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x:true;--chart-tick-y-length:4px;--chart-tick-x-length:5px;--chart-legend-top:false;}'});
      data='[{"color":"#425cef","name":"Line 1","type":"line","lineThickness": 2,';
      data+='"markerType":"circle","markerSize":10,"markerColor":"#1f41ff",';
      data+='"dataPoints":[{"x":14,"y":350},{"x":20,"y":414},{"x":30,"y":520},{"x":40,"y":460}]},';
      data+='{"color": "#ff2051","name":"Line 2","type":"line","lineThickness":2,';
      data+='"markerType":"cross","markerSize":10,"markerColor":"#ff0015",';
      data+='"dataPoints":[{"x":14,"y":250},{"x":20,"y":514},{"x":30,"y":270},{"x":40,"y":320}]}]';
      element.setProperty('ctitle','Multiple Lines Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','weight (kg)');
      element.setProperty('xtitle','distance (m)');
      element.setProperty('data',data);
      element.setProperty('cborder',true);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const legendEl: E2EElement = await svgEl.find('#linechart-legend');
      const xTitleEl: E2EElement = await svgEl.find('#linechart-xtitle');
      const yTitleEl: E2EElement = await svgEl.find('#linechart-ytitle');
      const xTextEl: E2EElement = await xTitleEl.find('#linechart-xtitle-text');
      const yTextEl: E2EElement = await yTitleEl.find('#linechart-ytitle-text');
      expect(legendEl).not.toBeNull();
      expect(legendEl.getAttribute('class')).toEqual('');
      const lineEls: E2EElement[] = await legendEl.findAll('line');
      const textEls: E2EElement[] = await legendEl.findAll('text');
      expect(lineEls.length).toEqual(2);
      expect(textEls.length).toEqual(2);
      expect(lineEls[0].getAttribute('x1')).toEqual("283.4375");
      expect(lineEls[0].getAttribute('y1')).toEqual("425");
      expect(lineEls[0].getAttribute('x2')).toEqual("298.4375");
      expect(lineEls[0].getAttribute('y2')).toEqual("425");
      expect(lineEls[0].getAttribute('stroke')).toEqual("#425cef");
      expect(lineEls[0].getAttribute('stroke-width')).toEqual("2");
      expect(textEls[0].getAttribute('x')).toEqual("303.4375");
      expect(textEls[0].getAttribute('y')).toEqual("425");
      expect(textEls[0].getAttribute('text-anchor')).toEqual("start");
      expect(textEls[0].getAttribute('font-family')).toEqual("Verdana");
      expect(textEls[0].getAttribute('font-size')).toEqual("12px");
      expect(textEls[0].textContent).toEqual("Line 1");
      expect(lineEls[1].getAttribute('x1')).toEqual("360");
      expect(lineEls[1].getAttribute('y1')).toEqual("425");
      expect(lineEls[1].getAttribute('x2')).toEqual("375");
      expect(lineEls[1].getAttribute('y2')).toEqual("425");
      expect(lineEls[1].getAttribute('stroke')).toEqual("#ff2051");
      expect(lineEls[1].getAttribute('stroke-width')).toEqual("2");
      expect(textEls[1].getAttribute('x')).toEqual("380");
      expect(textEls[1].getAttribute('y')).toEqual("425");
      expect(textEls[1].getAttribute('text-anchor')).toEqual("start");
      expect(textEls[1].getAttribute('font-family')).toEqual("Verdana");
      expect(textEls[1].getAttribute('font-size')).toEqual("12px");
      expect(textEls[1].textContent).toEqual("Line 2");
      expect(xTextEl.getAttribute('x')).toEqual('353');
      expect(xTextEl.getAttribute('y')).toEqual('400');
      expect(yTextEl.getAttribute('x')).toEqual('25');
      expect(yTextEl.getAttribute('y')).toEqual('234');
    });

    it('should have a chart with everything on', async () => {
      await page.addStyleTag({content: ':root{--chart-grid-x:true;--chart-tick-y-length:4px;--chart-tick-x-length:5px;--chart-legend-top:false;}'});
      data='[{"color":"#425cef","name":"Line 1","type":"line","lineThickness": 2,';
      data+='"markerType":"circle","markerSize":10,"markerColor":"#1f41ff",';
      data+='"dataPoints":[{"x":14,"y":350},{"x":20,"y":414},{"x":30,"y":520},{"x":40,"y":460}]},';
      data+='{"color": "#ff2051","name":"Line 2","type":"line","lineThickness":2,';
      data+='"markerType":"cross","markerSize":10,"markerColor":"#ff0015",';
      data+='"dataPoints":[{"x":14,"y":250},{"x":20,"y":514},{"x":30,"y":270},{"x":40,"y":320}]}]';
      element.setProperty('ctitle','Multiple Lines Chart');     
      element.setProperty('subtitle','test sub-title');
      element.setProperty('ytitle','weight (kg)');
      element.setProperty('xtitle','distance (m)');
      element.setProperty('data',data);
      element.setProperty('animation',true);
      element.setProperty('cborder',true);
      await element.callMethod('init'); // requires as you change the page style
      await page.waitForChanges();
      await element.callMethod('renderChart');
      await page.waitForChanges();
      const divEl: E2EElement = await page.find('jeep-linechart >>> #div-linechart-container');
      const svgEl: E2EElement = await divEl.find('#svg-linechart');
      const rectEl: E2EElement = await svgEl.find('#svg-border-rect');
      const gEl: E2EElement = await svgEl.find('#linechart-title');
      const titleEls: E2EElement[] = await gEl.findAll('text');
      const legendEl: E2EElement = await svgEl.find('#linechart-legend');
      const lineEls: E2EElement[] = await legendEl.findAll('line');
      const textEls: E2EElement[] = await legendEl.findAll('text');
      const xTitleEl: E2EElement = await svgEl.find('#linechart-xtitle');
      const yTitleEl: E2EElement = await svgEl.find('#linechart-ytitle');
      const xTextEl: E2EElement = await xTitleEl.find('#linechart-xtitle-text');
      const yTextEl: E2EElement = await yTitleEl.find('#linechart-ytitle-text');
      const gAxesEl: E2EElement = await svgEl.find('#linechart-axes');
      const lineXEL: E2EElement = await gAxesEl.find('#linechart-xaxis');
      const lineYEL: E2EElement = await gAxesEl.find('#linechart-yaxis');
      const dataEl: E2EElement = await svgEl.find('#linechart-data');
      const dataSetEls: E2EElement[] = await dataEl.findAll('.linechart-dataset');
      const polylineEls: E2EElement[] = await dataEl.findAll('.linechart-data');
      const animateEls: E2EElement[] = await dataEl.findAll('.linechart-data-animate');
      const markerEls: E2EElement[] = await dataEl.findAll('.marker');
      const useEls: E2EElement[] = await dataEl.findAll('.marker-use');
      const resPoints1:string = "237.48,194.5 314.4,163.14 442.6,111.2 570.8,140.6";
      const resPoints2:string = "237.48,243.5 314.4,114.14 442.6,233.7 570.8,209.2";
      expect(dataSetEls.length).toEqual(2);
      expect(polylineEls.length).toEqual(2);
      expect(animateEls.length).toEqual(2);
      expect(markerEls.length).toEqual(8);
      expect(useEls.length).toEqual(8);
      expect(rectEl).not.toBeNull();
      expect(rectEl.getAttribute('class')).toEqual('border-rect');      
      expect(titleEls[0].getAttribute('x')).toEqual('50%');
      expect(titleEls[0].getAttribute('y')).toEqual('35');
      expect(titleEls[0].textContent).toEqual('Multiple Lines Chart');
      expect(titleEls[1].getAttribute('x')).toEqual('50%');
      expect(titleEls[1].getAttribute('y')).toEqual('57');
      expect(titleEls[1].textContent).toEqual('test sub-title');
      expect(legendEl.getAttribute('class')).toEqual('');
      expect(lineEls[0].getAttribute('x1')).toEqual("283.4375");
      expect(lineEls[0].getAttribute('y1')).toEqual("425");
      expect(lineEls[0].getAttribute('x2')).toEqual("298.4375");
      expect(lineEls[0].getAttribute('y2')).toEqual("425");
      expect(textEls[0].getAttribute('x')).toEqual("303.4375");
      expect(textEls[0].getAttribute('y')).toEqual("425");
      expect(lineEls[1].getAttribute('x1')).toEqual("360");
      expect(lineEls[1].getAttribute('y1')).toEqual("425");
      expect(lineEls[1].getAttribute('x2')).toEqual("375");
      expect(lineEls[1].getAttribute('y2')).toEqual("425");
      expect(textEls[1].getAttribute('x')).toEqual("380");
      expect(textEls[1].getAttribute('y')).toEqual("425");

      expect(xTextEl.getAttribute('x')).toEqual('353');
      expect(xTextEl.getAttribute('y')).toEqual('400');
      expect(xTextEl.textContent).toEqual('distance (m)');
      expect(yTextEl.getAttribute('x')).toEqual('25');
      expect(yTextEl.getAttribute('y')).toEqual('234');
      expect(yTextEl.textContent).toEqual('weight (kg)');

      expect(lineYEL.getAttribute('x1')).toEqual('58');
      expect(lineYEL.getAttribute('y1')).toEqual('72');
      expect(lineYEL.getAttribute('x2')).toEqual('58');
      expect(lineYEL.getAttribute('y2')).toEqual('366');
      expect(lineXEL.getAttribute('x1')).toEqual('58');
      expect(lineXEL.getAttribute('y1')).toEqual('366');
      expect(lineXEL.getAttribute('x2')).toEqual('699');
      expect(lineXEL.getAttribute('y2')).toEqual('366');
      expect(polylineEls[0].getAttribute('id')).toEqual("linechart-data-0");
      expect(polylineEls[0].getAttribute('points')).toEqual(resPoints1);
      expect(polylineEls[1].getAttribute('id')).toEqual("linechart-data-1");
      expect(polylineEls[1].getAttribute('points')).toEqual(resPoints2);
      expect(animateEls[0].getAttribute('from')).toEqual("352.9171019574102");
      expect(animateEls[0].getAttribute('to')).toEqual("0");
      expect(animateEls[1].getAttribute('from')).toEqual("456.3208254852709");
      expect(animateEls[1].getAttribute('to')).toEqual("0");
      expect(markerEls[0].getAttribute('class')).toEqual("marker marker-circle");
      expect(markerEls[3].getAttribute('class')).toEqual("marker marker-circle");
      expect(markerEls[4].getAttribute('class')).toEqual("marker marker-cross");
      expect(markerEls[7].getAttribute('class')).toEqual("marker marker-cross");
      expect(useEls[0].getAttribute('x')).toEqual("232.48");
      expect(useEls[0].getAttribute('y')).toEqual("189.5");
      expect(useEls[1].getAttribute('x')).toEqual("309.4");
      expect(useEls[1].getAttribute('y')).toEqual("158.14");
      expect(useEls[2].getAttribute('x')).toEqual("437.6");
      expect(useEls[2].getAttribute('y')).toEqual("106.2");
      expect(useEls[3].getAttribute('x')).toEqual("565.8");
      expect(useEls[3].getAttribute('y')).toEqual("135.6");
      expect(useEls[4].getAttribute('x')).toEqual("232.48");
      expect(useEls[4].getAttribute('y')).toEqual("238.5");
      expect(useEls[5].getAttribute('x')).toEqual("309.4");
      expect(useEls[5].getAttribute('y')).toEqual("109.14");
      expect(useEls[6].getAttribute('x')).toEqual("437.6");
      expect(useEls[6].getAttribute('y')).toEqual("228.7");
      expect(useEls[7].getAttribute('x')).toEqual("565.8");
      expect(useEls[7].getAttribute('y')).toEqual("204.2");
//  expect(element).toEqualHtml(``)
      
    });
  });
});
